apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: app
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: app
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64 # no arm64 image available
      volumes:
        - name: state
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-state"
        - name: cache
          emptyDir: {}
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          env:
            - name: APPLICATION_URL
              value: "{{ .Values.ingress.host }}"
            {{- if .Values.onlyoffice.enabled }}
            - name: ONLYOFFICE_URL
              value: "http://{{ .Release.Name }}-onlyoffice"
            {{- end }}
          volumeMounts:
            - name: state
              mountPath: "{{ .Values.persistence.mountPath }}"
            - name: cache
              mountPath: "{{ .Values.cache.mountPath }}"
          ports:
            - containerPort: 8334
        - name: "{{ .Chart.Name }}-cache-cleaner"
          image: alpine
          command: ["sh", "-xc", "while true; do find /cache/video/ -type f -atime +2 -delete; sleep 3600; done"]
          volumeMounts:
            - name: cache
              mountPath: "/cache"
